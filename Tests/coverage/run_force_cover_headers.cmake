# Verbosité
if(NOT DEFINED FORCE_COVER_VERBOSE)
  set(FORCE_COVER_VERBOSE 0)
endif()
if(NOT DEFINED FORCE_COVER_PROGRESS_EVERY)
  set(FORCE_COVER_PROGRESS_EVERY 50)
endif()
if(FORCE_COVER_PROGRESS_EVERY LESS 1)
  set(FORCE_COVER_PROGRESS_EVERY 50)
endif()
if(NOT DEFINED FORCE_COVER_SHOW_ERRORS)
  set(FORCE_COVER_SHOW_ERRORS 5)
endif()

if(NOT DEFINED FORCE_COVER_EXE OR NOT EXISTS "${FORCE_COVER_EXE}")
  message(FATAL_ERROR "force_cover introuvable: ${FORCE_COVER_EXE}")
endif()
if(NOT DEFINED FC_MIRROR_DIR)
  message(FATAL_ERROR "FC_MIRROR_DIR non défini")
endif()
if(NOT DEFINED FORCE_COVER_HEADER_DIRS)
  message(FATAL_ERROR "FORCE_COVER_HEADER_DIRS non défini")
endif()
if(NOT DEFINED FORCE_COVER_STD)
  set(FORCE_COVER_STD "c++17")
endif()
if(NOT DEFINED FORCE_COVER_INCLUDE_DIRS)
  set(FORCE_COVER_INCLUDE_DIRS "")
endif()
if(NOT DEFINED FORCE_COVER_EXTRA_FLAGS)
  set(FORCE_COVER_EXTRA_FLAGS "")
endif()

file(REMOVE_RECURSE "${FC_MIRROR_DIR}")
file(MAKE_DIRECTORY "${FC_MIRROR_DIR}")

set(_patterns *.h *.hpp *.hh *.hxx *.ipp *.tpp *.inl)
set(_all_headers)
foreach(_root IN LISTS FORCE_COVER_HEADER_DIRS)
  if(EXISTS "${_root}")
    foreach(_pat IN LISTS _patterns)
      file(GLOB_RECURSE _hdrs LIST_DIRECTORIES false "${_root}/${_pat}")
      list(APPEND _all_headers ${_hdrs})
    endforeach()
  endif()
endforeach()
list(REMOVE_DUPLICATES _all_headers)
list(LENGTH _all_headers _n_headers)
message(STATUS "[force-cover] headers à traiter : ${_n_headers}")

set(_FLAGS "-I${FC_MIRROR_DIR}" "--language" "c++" "-std=${FORCE_COVER_STD}")
foreach(_inc IN LISTS FORCE_COVER_HEADER_DIRS)
  list(APPEND _FLAGS "-I${_inc}")
endforeach()
foreach(_inc IN LISTS FORCE_COVER_INCLUDE_DIRS)
  list(APPEND _FLAGS "-I${_inc}")
endforeach()
if(NOT "${FORCE_COVER_EXTRA_FLAGS}" STREQUAL "")
  separate_arguments(_EXTRA UNIX_COMMAND "${FORCE_COVER_EXTRA_FLAGS}")
  list(APPEND _FLAGS ${_EXTRA})
endif()

set(_log_dir "${FC_MIRROR_DIR}/.force_cover_logs")
file(MAKE_DIRECTORY "${_log_dir}")

set(_cnt_ok 0)
set(_cnt_fallback 0)
set(_idx 0)

foreach(_src IN LISTS _all_headers)
  math(EXPR _idx "${_idx}+1")
  math(EXPR _mod "${_idx} % ${FORCE_COVER_PROGRESS_EVERY}")
  if(FORCE_COVER_VERBOSE GREATER 0 OR _idx EQUAL 1 OR _mod EQUAL 0 OR _idx EQUAL _n_headers)
    message(STATUS "[force-cover] ${_idx}/${_n_headers} : ${_src}")
  endif()

  set(_rel "")
  foreach(_root IN LISTS FORCE_COVER_HEADER_DIRS)
    if(_rel STREQUAL "" AND _src MATCHES "^${_root}(/|$)")
      file(RELATIVE_PATH _rel "${_root}" "${_src}")
    endif()
  endforeach()
  if(_rel STREQUAL "")
    if(DEFINED CMAKE_SOURCE_DIR)
      file(RELATIVE_PATH _rel "${CMAKE_SOURCE_DIR}" "${_src}")
    else()
      get_filename_component(_rel "${_src}" NAME)
    endif()
  endif()

  get_filename_component(_outdir "${FC_MIRROR_DIR}/${_rel}" DIRECTORY)
  file(MAKE_DIRECTORY "${_outdir}")

  set(_tmp    "${FC_MIRROR_DIR}/${_rel}.tmp")
  set(_final  "${FC_MIRROR_DIR}/${_rel}")
  set(_errlog "${_log_dir}/${_rel}.stderr.txt")
  get_filename_component(_errdir "${_errlog}" DIRECTORY)
  file(MAKE_DIRECTORY "${_errdir}")

  execute_process(
    COMMAND "${FORCE_COVER_EXE}" "${_src}" -- ${_FLAGS}
    OUTPUT_FILE "${_tmp}"
    ERROR_FILE  "${_errlog}"
    RESULT_VARIABLE _rv
  )

  if(EXISTS "${_tmp}")
    file(SIZE "${_tmp}" _sz)
    if(_sz GREATER 0)
      file(RENAME "${_tmp}" "${_final}")
      math(EXPR _cnt_ok "${_cnt_ok}+1")
    else()
      file(REMOVE "${_tmp}")
      file(READ "${_src}" _contents)
      file(WRITE "${_final}" "${_contents}")
      math(EXPR _cnt_fallback "${_cnt_fallback}+1")
    endif()
  else()
    file(READ "${_src}" _contents)
    file(WRITE "${_final}" "${_contents}")
    math(EXPR _cnt_fallback "${_cnt_fallback}+1")
  endif()
endforeach()

message(STATUS "[force-cover] réécrits: ${_cnt_ok} | fallback: ${_cnt_fallback}")

if(FORCE_COVER_VERBOSE GREATER 1)
  file(GLOB_RECURSE _errs "${_log_dir}/*.stderr.txt")
  list(LENGTH _errs _ne)
  message(STATUS "[force-cover] logs d'erreurs: ${_ne} fichiers sous ${_log_dir}")
  if(_ne GREATER 0)
    set(_printed 0)
    foreach(_e IN LISTS _errs)
      if(_printed EQUAL FORCE_COVER_SHOW_ERRORS)
        break()
      endif()
      if(FORCE_COVER_VERBOSE GREATER 2)
        file(READ "${_e}" _econtent)
        message(STATUS "[force-cover][stderr] ${_e}\n${_econtent}")
      else()
        message(STATUS "[force-cover][stderr] ${_e}")
      endif()
      math(EXPR _printed "${_printed}+1")
    endforeach()
  endif()
endif()
