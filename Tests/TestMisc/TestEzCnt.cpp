#include <ezlibs/ezCnt.hpp>
#include <ezlibs/ezCTest.hpp>
#include <string>

// Desactivation des warnings de conversion
#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4244)  // Conversion from 'double' to 'float', possible loss of data
#pragma warning(disable : 4305)  // Truncation from 'double' to 'float'
#elif defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

bool TestEzCntGeneric() {
    //CTEST_ASSERT(ez::str::getDigitsCountOfAIntegralNumber(050) == 2);
    return true;
}

bool TestEzCntOneTypename() {
    ez::cnt::DicoVector<std::string> dico;
    CTEST_ASSERT(dico.tryAdd("toto"));
    CTEST_ASSERT(dico.tryAdd("toto", "tata"));
    return true;
}

bool TestEzCntTwoTypename() {
    ez::cnt::DicoVector<std::string, int32_t> dico;
    CTEST_ASSERT(dico.tryAdd("toto", 2));
    return true;
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

#define IfTestExist(v)            \
    if (vTest == std::string(#v)) \
    return v()

bool TestEzCnt(const std::string& vTest) {
    IfTestExist(TestEzCntGeneric);
    else IfTestExist(TestEzCntOneTypename);
    else IfTestExist(TestEzCntTwoTypename);
    return false;
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

#ifdef _MSC_VER
#pragma warning(pop)
#elif defined(__GNUC__) || defined(__clang__)
#pragma GCC diagnostic pop
#endif

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
